{"version":3,"file":"index.es.js","sources":["../src/BreakpointProvider.tsx","../src/Breakpoint.tsx"],"sourcesContent":["import React from 'react'\n\nexport const BreakpointContext = React.createContext<any>({})\n\ntype Props = {\n  breakpoints?: { [x: string]: number }\n  children: React.ReactNode\n}\n\nexport function BreakpointProvider({ breakpoints = {}, children }: Props): React.ReactElement {\n  const [currentWidth, setCurrentWidth] = React.useState(window.innerWidth)\n\n  React.useLayoutEffect(() => {\n    let resizeId\n    function handleResize(): void {\n      clearTimeout(resizeId)\n      resizeId = setTimeout(() => setCurrentWidth(window.innerWidth), 100)\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return (\n    <BreakpointContext.Provider value={{ breakpoints, currentWidth }}>\n      {children}\n    </BreakpointContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { BreakpointContext } from './BreakpointProvider'\n\nfunction getRelativeBreakpoint(px): number {\n  return (parseInt(px) / 16) * parseFloat(window.getComputedStyle(document.documentElement).fontSize)\n}\n\ntype Props = {\n  children: React.ReactNode\n  up?: boolean\n  down?: boolean\n  only?: boolean\n  [x: string]: any\n}\n\nexport function Breakpoint({\n  children,\n  up = false,\n  down = false,\n  only = false,\n  ...props\n}: Props): React.ReactElement | null {\n  const { currentWidth, breakpoints } = React.useContext(BreakpointContext)\n\n  const currentBreakpoint = Object.keys(props)[0]\n\n  if (currentBreakpoint && up) {\n    if (currentWidth >= getRelativeBreakpoint(breakpoints[currentBreakpoint])) {\n      return <>{children}</>\n    }\n  }\n  if (currentBreakpoint && down) {\n    if (currentWidth < getRelativeBreakpoint(breakpoints[currentBreakpoint])) {\n      return <>{children}</>\n    }\n  }\n\n  if (currentBreakpoint && only) {\n    const breakpointKeys = Object.keys(breakpoints)\n\n    const previous = breakpointKeys.indexOf(currentBreakpoint) - 1\n    const next = breakpointKeys.indexOf(currentBreakpoint) + 1\n\n    const min = previous < -1 ? 0 : breakpoints[currentBreakpoint]\n    const max = next >= breakpointKeys.length ? 99999 : breakpoints[breakpointKeys[next]]\n\n    if (currentWidth >= min && currentWidth < max) {\n      return <>{children}</>\n    }\n  }\n\n  return null\n}\n"],"names":["BreakpointContext","React","createContext","BreakpointProvider","breakpoints","children","currentWidth","setCurrentWidth","useState","window","innerWidth","useLayoutEffect","resizeId","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","Provider","value","getRelativeBreakpoint","px","parseInt","parseFloat","getComputedStyle","document","documentElement","fontSize","Breakpoint","up","down","only","props","useContext","currentBreakpoint","Object","keys","breakpointKeys","previous","indexOf","next","min","max","length"],"mappings":"qBAEO,MAAMA,EAAoBC,EAAMC,cAAmB,aAO1CC,GAAmBC,YAAEA,EAAc,GAAEC,SAAEA,IACrD,MAAOC,EAAcC,GAAmBN,EAAMO,SAASC,OAAOC,YAa9D,OAXAT,EAAMU,gBAAgB,KACpB,IAAIC,EACJ,SAASC,IACPC,aAAaF,GACbA,EAAWG,WAAW,IAAMR,EAAgBE,OAAOC,YAAa,KAIlE,OADAD,OAAOO,iBAAiB,SAAUH,GAC3B,IAAMJ,OAAOQ,oBAAoB,SAAUJ,IACjD,IAGDZ,gBAACD,EAAkBkB,UAASC,MAAO,CAAEf,YAAAA,EAAaE,aAAAA,IAC/CD,GCrBP,SAASe,EAAsBC,GAC7B,OAAQC,SAASD,GAAM,GAAME,WAAWd,OAAOe,iBAAiBC,SAASC,iBAAiBC,UAW5F,SAAgBC,GAAWvB,SACzBA,EAAQwB,GACRA,GAAK,EAAKC,KACVA,GAAO,EAAKC,KACZA,GAAO,KACJC,IAEH,MAAM1B,aAAEA,EAAYF,YAAEA,GAAgBH,EAAMgC,WAAWjC,GAEjDkC,EAAoBC,OAAOC,KAAKJ,GAAO,GAE7C,GAAIE,GAAqBL,GACnBvB,GAAgBc,EAAsBhB,EAAY8B,IACpD,OAAOjC,gCAAGI,GAGd,GAAI6B,GAAqBJ,GACnBxB,EAAec,EAAsBhB,EAAY8B,IACnD,OAAOjC,gCAAGI,GAId,GAAI6B,GAAqBH,EAAM,CAC7B,MAAMM,EAAiBF,OAAOC,KAAKhC,GAE7BkC,EAAWD,EAAeE,QAAQL,GAAqB,EACvDM,EAAOH,EAAeE,QAAQL,GAAqB,EAEnDO,EAAMH,GAAY,EAAI,EAAIlC,EAAY8B,GACtCQ,EAAMF,GAAQH,EAAeM,OAAS,MAAQvC,EAAYiC,EAAeG,IAE/E,GAAIlC,GAAgBmC,GAAOnC,EAAeoC,EACxC,OAAOzC,gCAAGI,GAId,OAAO"}