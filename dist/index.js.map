{"version":3,"file":"index.js","sources":["../src/BreakpointProvider.tsx","../src/Breakpoint.tsx"],"sourcesContent":["import React from 'react'\n\nexport const BreakpointContext = React.createContext<any>({})\n\ntype Props = {\n  breakpoints?: { [x: string]: number }\n  children: React.ReactNode\n}\n\nexport function BreakpointProvider({ breakpoints = {}, children }: Props): React.ReactElement {\n  const [currentWidth, setCurrentWidth] = React.useState(window.innerWidth)\n\n  React.useLayoutEffect(() => {\n    let resizeId\n    function handleResize(): void {\n      clearTimeout(resizeId)\n      resizeId = setTimeout(() => setCurrentWidth(window.innerWidth), 100)\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return (\n    <BreakpointContext.Provider value={{ breakpoints, currentWidth }}>\n      {children}\n    </BreakpointContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { BreakpointContext } from './BreakpointProvider'\n\nfunction getRelativeBreakpoint(px): number {\n  return (parseInt(px) / 16) * parseFloat(window.getComputedStyle(document.documentElement).fontSize)\n}\n\ntype Props = {\n  children: React.ReactNode\n  up?: boolean\n  down?: boolean\n  only?: boolean\n  [x: string]: any\n}\n\nexport function Breakpoint({\n  children,\n  up = false,\n  down = false,\n  only = false,\n  ...props\n}: Props): React.ReactElement | null {\n  const { currentWidth, breakpoints } = React.useContext(BreakpointContext)\n\n  const currentBreakpoint = Object.keys(props)[0]\n\n  if (currentBreakpoint && up) {\n    if (currentWidth >= getRelativeBreakpoint(breakpoints[currentBreakpoint])) {\n      return <>{children}</>\n    }\n  }\n  if (currentBreakpoint && down) {\n    if (currentWidth < getRelativeBreakpoint(breakpoints[currentBreakpoint])) {\n      return <>{children}</>\n    }\n  }\n\n  if (currentBreakpoint && only) {\n    const breakpointKeys = Object.keys(breakpoints)\n\n    const previous = breakpointKeys.indexOf(currentBreakpoint) - 1\n    const next = breakpointKeys.indexOf(currentBreakpoint) + 1\n\n    const min = previous < -1 ? 0 : breakpoints[currentBreakpoint]\n    const max = next >= breakpointKeys.length ? 99999 : breakpoints[breakpointKeys[next]]\n\n    if (currentWidth >= min && currentWidth < max) {\n      return <>{children}</>\n    }\n  }\n\n  return null\n}\n"],"names":["BreakpointContext","React","createContext","getRelativeBreakpoint","px","parseInt","parseFloat","window","getComputedStyle","document","documentElement","fontSize","children","up","down","only","props","currentWidth","breakpoints","useContext","currentBreakpoint","Object","keys","breakpointKeys","previous","indexOf","next","min","max","length","setCurrentWidth","useState","innerWidth","useLayoutEffect","resizeId","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","Provider","value"],"mappings":"gJAEO,MAAMA,EAAoBC,EAAMC,cAAmB,ICE1D,SAASC,EAAsBC,GAC7B,OAAQC,SAASD,GAAM,GAAME,WAAWC,OAAOC,iBAAiBC,SAASC,iBAAiBC,6BAW5F,UAA2BC,SACzBA,EAAQC,GACRA,GAAK,EAAKC,KACVA,GAAO,EAAKC,KACZA,GAAO,KACJC,IAEH,MAAMC,aAAEA,EAAYC,YAAEA,GAAgBjB,EAAMkB,WAAWnB,GAEjDoB,EAAoBC,OAAOC,KAAKN,GAAO,GAE7C,GAAII,GAAqBP,GACnBI,GAAgBd,EAAsBe,EAAYE,IACpD,OAAOnB,gCAAGW,GAGd,GAAIQ,GAAqBN,GACnBG,EAAed,EAAsBe,EAAYE,IACnD,OAAOnB,gCAAGW,GAId,GAAIQ,GAAqBL,EAAM,CAC7B,MAAMQ,EAAiBF,OAAOC,KAAKJ,GAE7BM,EAAWD,EAAeE,QAAQL,GAAqB,EACvDM,EAAOH,EAAeE,QAAQL,GAAqB,EAEnDO,EAAMH,GAAY,EAAI,EAAIN,EAAYE,GACtCQ,EAAMF,GAAQH,EAAeM,OAAS,MAAQX,EAAYK,EAAeG,IAE/E,GAAIT,GAAgBU,GAAOV,EAAeW,EACxC,OAAO3B,gCAAGW,GAId,OAAO,2CD3C0BM,YAAEA,EAAc,GAAEN,SAAEA,IACrD,MAAOK,EAAca,GAAmB7B,EAAM8B,SAASxB,OAAOyB,YAa9D,OAXA/B,EAAMgC,gBAAgB,KACpB,IAAIC,EACJ,SAASC,IACPC,aAAaF,GACbA,EAAWG,WAAW,IAAMP,EAAgBvB,OAAOyB,YAAa,KAIlE,OADAzB,OAAO+B,iBAAiB,SAAUH,GAC3B,IAAM5B,OAAOgC,oBAAoB,SAAUJ,IACjD,IAGDlC,gBAACD,EAAkBwC,UAASC,MAAO,CAAEvB,YAAAA,EAAaD,aAAAA,IAC/CL"}